# 1. Оценки текстом

# Напишите программу, которая преобразует список оценок по системе от 1 до 5 в текстовое представление.
# Нужно сохранить в списках числовой результат и текстовое представление.
# Где, 5 — "отлично", 3-4 — "хорошо",
# а 2 и ниже — "неудовлетворительно".

# Данные:

# grades = [5, 3, 4, 2, 1, 5, 3]

# Пример вывода:

# [[5, 'отлично'], [3, 'хорошо'], [4, 'хорошо'], [2, 'неудовлетворительно'], [1, 'неудовлетворительно'], [5, 'отлично'], [3, 'хорошо']]

# grades = [5, 3, 4, 2, 1, 5, 3]
#
# result = []
#
# for num in grades:
#     if num == 5:
#         text_num = "отлично"
#     elif 3 <= num <= 4:
#         text_num = "хорошо"
#     else:
#         text_num = "неудовлетворительно"
#
#     result.append([num, text_num])
#
# print(result)



# 2. Правильные скобки

# Напишите программу, которая принимает строку,
# содержащую любые виды скобок — круглые (),
# квадратные [] и фигурные {}.
# Необходимо проверить, правильно ли они расставлены.
# Скобки считаются правильно расставленными, если:
# Каждая открывающая скобка имеет соответствующую закрывающую.
# Скобки закрываются в правильном порядке.

# Пример данных:

# string = "({[}])"

# Пример вывода:

# Скобки: ({[}])

# Валидны: False

# Скобки: ([({}()){}])

# Валидны: True

# string = "({[}])"
#
# examples = [
#     "({[}])",
#     "([({}()){}])"
# ]
#
# for string in examples:
#
#     bracket_map = {')': '(', '}': '{', ']': '['}
#
#     stack = []
#     valid = True
#
#     for char in string:
#         if char in "({[":
#             stack.append(char)
#         elif char in ")}]":
#             if not stack or stack[-1] != bracket_map[char]:
#                 valid = False
#                 break
#             stack.pop()


