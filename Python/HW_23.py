#  1. Объединение данных в строку
# Напишите функцию, которая принимает список любых данных (строки, числа, списки, словари)
# и возвращает их строковое представление, объединённое через " | ".
# Добавьте документацию и аннотации типов для всех параметров и возвращаемого значения.
#
# Данные:
#
# data = [42, "hello", [1, 2, 3], {"a": 1, "b": 2}]
#
#
# Пример вывода:
#
# 42 | hello | [1, 2, 3] | {'a': 1, 'b': 2}

# from  typing import Any, List
#
#
# def join_data(data: List[Any]) -> str:
#
#     """
#     Преобразует список данных в строку, объединяя элементы через " | ".
#
#     :param data: Список с элементами разных типов (числа, строки, списки, словари и др.)
#     :return: Строка, содержащая элементы списка, разделённые " | "
#
#     """
#
#     return " | ".join(map(str, data))
#
# # Данные:

# data = [42, "hello", [1, 2, 3], {"a": 1, "b": 2}]
#
#
# result = join_data(data)
# print(result)




#
#
# 2. Сумма вложенных чисел
# Напишите функцию, которая принимает список словарей,
# где каждый словарь содержит имя пользователя и список баллов.
# Функция должна вернуть сумму всех чисел.
# Добавьте документацию и аннотации типов для всех параметров и возвращаемого значения.
#
# Данные:
#
# data = [
#
#     {"name": "Alice", "scores": [10, 20, 30]},
#
#     {"name": "Bob", "scores": [5, 15, 25]},
#
#     {"name": "Charlie", "scores": [7, 17, 27]}
#
# ]
#
# Пример вывода:
#
# Итоговый балл: 156

# from  typing import  List, Dict
#
#
# def sum_nested_scores(data: List[Dict[str, List[int]]]) -> int:
#
#     """
#     Вычисляет сумму всех баллов из списка словарей.
#
#
#     :param data: Список словарей, где каждый содержит имя пользователя и список его баллов.
#     :return: Общая сумма всех чисел из списков баллов.
#     """
#
#     return  sum(sum(user["scores"]) for user in data)
#
# # Исходные данные
#
# data = [
#     {"name": "Alice", "scores": [10, 20, 30]},
#     {"name": "Bob", "scores": [5, 15, 25]},
#     {"name": "Charlie", "scores": [7, 17, 27]}
# ]
#
# # Вызов функции и вывод результата
#
# result = sum_nested_scores(data)
# print(f"Итоговый балл: {result}")

